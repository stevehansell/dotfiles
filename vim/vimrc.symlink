set nocompatible
set relativenumber
set number
set autoindent
set smartindent
set copyindent
set cursorline
set colorcolumn=80
set t_Co=256

" Spacing and indentation
"
set expandtab
set shiftwidth=4 "Number of spaces for autoindent
set softtabstop=4
set tabstop=4
set smarttab " insert tabs on the start of a line according to shiftwidth, not tabstop
set shiftround

set nowrap
set showmatch " Show matching parens
set title " Change terminal windows title

set nobackup
set noswapfile

" Search
"
set hlsearch " Highlight search terms
set incsearch " Show search terms as you type
set ignorecase " Ignore case when searching
set smartcase " Ignore case if search is lower, case-sensitive otherwise

set wildmenu " Completion in command line mode
set autoread " Autoreload file when modified outside of vim, but not IN Vim
set fileformats+=mac

if &shell =~# 'fish$'
    set shell=/bin/bash
endif

syntax enable

filetype off " Required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-sensible'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'bling/vim-airline'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'ervandew/supertab'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'scrooloose/NERDCommenter'
Plugin 'chrisbra/NrrwRgn'
Plugin 'godlygeek/csapprox'
Plugin 'scrooloose/syntastic'
"Plugin 'klen/python-mode'

call vundle#end()

syntax on


" let g:airline_theme='powerlineish'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_section_z=''

let g:SuperTabNoCompleteAfter=['^',',','\s']

let g:NERDTreeIgnore=['.pyc$[[file]]','__init__.py','.egg$','.egg-info$']

set background=dark
colorscheme lavalamp

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

" Remappings
"

" Delete without copying to register
map <leader>d "_dd

" Remap window switching
map <C-h> <C-W>h
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-l> <C-W>l

" Toggle NERDTree
map <C-n> :NERDTreeToggle<CR>

" Quickly edit this file
nmap <leader>ev :e $MYVIMRC<CR>

" Source the .vimrc file
nmap <leader>es :source $MYVIMRC<CR>

" Clear current search term + highlighting
nnoremap <silent> <leader>l :nohl<CR>

" Toggle relativenumber (See function below)
nmap <leader>rn :call NumberToggle()<CR>

" Set buffer to full width
map <leader>\| <C-W>\|

" Set buffers to equal width
map <leader>= <C-W>=

map <leader>t gt

" Better indenting of code blocks
vnoremap < <gv " Indents selection left
vnoremap > >gv " Indents selection right

nnoremap <silent>[b :bprevious<CR>
nnoremap <silent>]b :bnext<CR>
nnoremap <silent>[B :bfirst<CR>
nnoremap <silent>]B :blast<CR>

" Dont open NERDTree if files are passed
autocmd VimEnter * NERDTree
autocmd VimEnter * if argc() == 0 | NERDTree | endif

autocmd FileType ruby setlocal tabstop=2 softtabstop=2 shiftwidth=2

" Python Mode Config
"let g:pymode_virtualenv_path = $VIRTUAL_ENV


" vimrc file for following the coding standards specified in PEP 7 & 8.
"
" To use this file, source it in your own personal .vimrc file (``source
" <filename>``) or, if you don't have a .vimrc file, you can just symlink to it
" (``ln -s <this file> ~/.vimrc``).  All options are protected by autocmds
" (read below for an explanation of the command) so blind sourcing of this file
" is safe and will not affect your settings for non-Python or non-C files.
"
"
" All setting are protected by 'au' ('autocmd') statements.  Only files ending
" in .py or .pyw will trigger the Python settings while files ending in *.c or
" *.h will trigger the C settings.  This makes the file "safe" in terms of only
" adjusting settings for Python and C files.
"
" Only basic settings needed to enforce the style guidelines are set.
" Some suggested options are listed but commented out at the end of this file.

" Number of spaces that a pre-existing tab is equal to.
" For the amount of space used for a new tab use shiftwidth.
au BufRead,BufNewFile *py,*pyw,*.c,*.h set tabstop=8

" What to use for an indent.
" This will affect Ctrl-T and 'autoindent'.
" Python: 4 spaces
" C: tabs (pre-existing files) or 4 spaces (new files)
au BufRead,BufNewFile *.py,*pyw set shiftwidth=8 softtabstop=8 noexpandtab
" au BufRead,BufNewFile *.py,*.pyw set expandtab
if !exists("*Select_c_style")
    fu Select_c_style()
        if search('^\t', 'n', 150)
            set shiftwidth=8
            set noexpandtab
        el
            set shiftwidth=8
            set expandtab
        en
    endf
endif
au BufRead,BufNewFile *.c,*.h call Select_c_style()
"au BufRead,BufNewFile *.py call Select_c_style()
au BufRead,BufNewFile Makefile* set noexpandtab

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" Display tabs at the beginning of a line in Python mode as bad.
"au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Wrap text after a certain number of characters
" Python: 79
" C: 79
"au BufRead,BufNewFile *.py,*.pyw,*.c,*.h set textwidth=0 nowrap

" Turn off settings in 'formatoptions' relating to comment formatting.
" - c : do not automatically insert the comment leader when wrapping based on
"    'textwidth'
" - o : do not insert the comment leader when using 'o' or 'O' from command mode
" - r : do not insert the comment leader when hitting <Enter> in insert mode
" Python: not needed
" C: prevents insertion of '*' at the beginning of every line in a comment
au BufRead,BufNewFile *.c,*.h set formatoptions-=c formatoptions-=o formatoptions-=r

" Use UNIX (\n) line endings.
" Only used for new files so as to not force existing files to change their
" line endings.
" Python: yes
" C: yes
au BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix
