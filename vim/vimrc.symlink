
" Vundle {{{

filetype off " Required by Vundle

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'kien/ctrlp.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'

Plugin 'garbas/vim-snipmate'
" Includes snippets usable by snipmate
Plugin 'honza/vim-snippets'
Plugin 'grvcoelho/vim-javascript-snippets'

Plugin 'ervandew/supertab'

Plugin 'scrooloose/NERDCommenter'

Plugin 'tpope/vim-dispatch'
Plugin 'airblade/vim-gitgutter'

Plugin 'mileszs/ack.vim'
Plugin 'christoomey/vim-tmux-runner'
Plugin 'christoomey/vim-tmux-navigator'

Plugin 'dracula/vim'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'pangloss/vim-javascript'

Plugin 'mxw/vim-jsx'
Plugin 'nikvdp/ejs-syntax'
Plugin 'gabrielelana/vim-markdown'
Plugin 'leafgarland/typescript-vim'
call vundle#end()

" }}}

" Theme/UI {{{

"colorscheme PaperColor
colorscheme dracula
set background=dark
set t_Co=256            " No. of colors
syntax enable           " Enables syntax processing
syntax on

let g:enable_bold_font = 1
"let g:airline_theme='papercolor'
let g:airline_theme='onedark'
let g:airline_powerline_fonts=1
set guifont=Hack                        " List of fonts which will be used for the GUI version of Vim.
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline#extensions#branch#enabled = 0
let g:airline#extensions#hunks#enabled = 0
" }}}

" UI Config {{{
set nocompatible
filetype indent plugin on " Loads lang specific indent settings
set wildmenu            " Visual autocomplete for command menu
set nonumber
set relativenumber      " Offset current line number from zero
set number              " Show current line number
set cursorline          " Highlight the screen line
set colorcolumn=80      " Highlight at N columns
set cindent
set autoindent          " Copy indent from current line when starting new line
set smartindent         " Autoindents next line based on current syntax
set copyindent          " Copy the structure of the existing lines indent when autoindenting a new line.
set lazyredraw          " Redraw screen only when necessary
set showmatch           " Show matching [({})]
set title               " Change terminal windows title
set nowrap              " Do not wrap lines that are longer than the buffer width
set textwidth=0         " Set to zero by default to disable line wrapping.
set completeopt-=preview " Removes preview window for Insert mode completion

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red
" }}}

" Searching {{{
set hlsearch " Highlight search terms
set incsearch " Show search terms as you type
set ignorecase " Ignore case when searching
set smartcase " Ignore case if search is lower, case-sensitive otherwise
" }}}

" Folding {{{
set foldenable          " Enable folding
set foldlevelstart=10   " Open most folds by default
set foldlevel=10   " Open most folds by default
set foldnestmax=10      " 10 nested folds maximum
" }}}

" Window Management {{{
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l
" }}}

" Buffer Management {{{
nnoremap <leader>bb :buffers<CR>
nnoremap <leader>bp :bprevious<CR>
nnoremap <leader>bn :bnext<CR>
nnoremap <leader>bf :bfirst<CR>
nnoremap <leader>bl :blast<CR>
nnoremap <leader>bt <C-^>
"}}}

" Mapping and Leader Shortcuts {{{

" Delete without copying to register
nnoremap <leader>d "_dd

" Quickly edit this file
nnoremap <leader>ev :tabnew $MYVIMRC<CR>

" Source the .vimrc file
nnoremap <leader>es :source $MYVIMRC<CR>

" Edit .dotfiles in Vim
nnoremap <leader>ed :e ~/.dotfiles<CR>

" Clear current search term + highlighting
nnoremap <silent> <leader>l :nohl<CR>

" Changes tab `3gt` goes to third tab
nnoremap <leader>t gt

" Set buffer to full width
nnoremap <leader>\| <C-W>\|

" Set buffers to equal width
nnoremap <leader>= <C-W>=

" Better indenting of code blocks
vnoremap < <gv
vnoremap > >gv
nnoremap < v$<<esc>
nnoremap > v$><esc>

" Quickfix management
nnoremap <Space><Space> :ccl<cr>

" Trigger silver searcher for word under cursor
nnoremap <Leader>ac :call SearchForCallSitesCursor()<CR>

nnoremap <silent><C-n> :Explore<CR>
"}}}

" Backup and File Settings {{{
set nobackup            " Disable backup files
set noswapfile          " Disable swap file creation
set autoread " Autoreload file when modified outside of vim, but not IN Vim
set fileformats+=mac
"}}}

" Explore Settings {{{
let g:netrw_list_hide= '\.pyc,__init__\.py,\.egg$,.*\.egg-info/$,\.ropeproject/$,\.DS_Store$,node_modules/$,\.git/$,\.json\.gzip$,\.vscode/$'
" }}}

" CtrlP Settings {{{
let g:ctrlp_match_window='bottom,order:ttb'
let g:ctrlp_switch_buffer=0             " Open in new buffer
let g:ctrlp_working_path_mode=0         " Allows changing working directory in CtrlP

if executable('ag')
  set grepprg=ag\ --no-group\ --no-color         " Use Silver Searcher instead of grep

  " Make CtrlP use ag for listing the files. Way faster and no useless files.
  " " Without --hidden, it never finds .travis.yml since it starts with a dot
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif

" }}}

" Syntastic Settings {{{
let g:syntastic_cucumber_cucumber_args="--profile default"
"}}}

" Pymode Settings {{{
let g:pymode_folding = 1
let g:pymode_lint = 1
let g:pymode_lint_on_write = 1
let g:pymode_lint_unmodified = 1
let g:pymode_lint_ignore = "W191,E501,W503"
let g:pymode_lint_message = 1
"}}}

" SuperTab Settings {{{
let g:SuperTabNoCompleteAfter=['^',',','\s']
"}}}

" Typescript Syntax Settings {{{
let g:typescript_compiler_binary = 'tsc'
let g:typescript_indent_disable = 1
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow
"}}}

" Ack Settings {{{
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
  let g:ack_use_dispatch=1
endif
"}}}

" Tmux Runner Settings {{{
let g:VtrStripLeadingWhitespace=0
let g:VtrClearEmptyLines=0
let g:VtrAppendNewline=1

let g:VtrUseVtrMaps=1

nnoremap <leader>va :VtrAttachToPane<CR>
nnoremap <leader>fr :VtrFocusRunner<CR>
nnoremap <leader>sc :VtrSendCommandToRunner<CR>

"}}}

" Autogroups {{{

augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker foldlevelstart=0 foldlevel=0
augroup END

augroup configgroup
    autocmd!
    "autocmd BufEnter * silent! lcd %:p:h " Auto `cd` on buffer change
    autocmd VimEnter * highlight clear SignColumn               " On Vim load
    autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab shiftround
    autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab smarttab shiftround
    autocmd FileType json,yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab shiftround
    autocmd FileType javascript,typescript setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab shiftround
    autocmd FileType html setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab shiftround
    autocmd FileType css,scss setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab shiftround
    autocmd FileType vim setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab shiftround
    autocmd FileType cucumber setlocal tabstop=2 shiftwidth=2 softtabstop=2 noexpandtab smarttab shiftround
    autocmd FileType yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab shiftround
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufRead,BufNewFile *.md setlocal textwidth=80 smarttab shiftround nospell
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix  " Use UNIX (\n) line endings
    autocmd FileType org setlocal textwidth=0 colorcolumn=0 tabstop=2 shiftwidth=2 softtabstop=2
    autocmd BufReadPre *.ts let b:javascript_lib_use_typescript=1
augroup END
"}}}

 " JavaScript Libraries {{{
 let g:jsx_ext_required=0
  "let g:used_javascript_libs = 'react,flux,chai'
" }}}

" Custom Functions {{{

function! SearchForCallSitesCursor()
  let searchTerm = expand("<cword>")
  execute ":Ack! " . l:searchTerm . " " . getcwd()
endfunction

" }}}
