set nocompatible
set relativenumber
"set autoindent
set smartindent
set copyindent
set cursorline
set colorcolumn=80

" Spacing and indentation
"
set expandtab
set shiftwidth=4 "Number of spaces for autoindent
set softtabstop=4
set tabstop=4
set smarttab " insert tabs on the start of a line according to shiftwidth, not tabstop
set shiftround

set nowrap
set showmatch " Show matching parens
set title " Change terminal windows title

set nobackup
set noswapfile

" Search
"
set hlsearch " Highlight search terms
set incsearch " Show search terms as you type
set ignorecase " Ignore case when searching
set smartcase " Ignore case if search is lower, case-sensitive otherwise

syntax enable

filetype off " Required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-sensible'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'bling/vim-airline'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'ervandew/supertab'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'
Plugin 'scrooloose/NERDCommenter'

call vundle#end()

syntax on


" let g:airline_theme='powerlineish'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_section_z=''

let g:SuperTabNoCompleteAfter=['^',',','\s']

let g:NERDTreeIgnore=['.pyc$[[file]]']

set background=dark
colorscheme solarized

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

" Remappings
"

" Delete without copying to register
map <leader>d "_dd

" Remap window switching
map <C-h> <C-W>h
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-l> <C-W>l

" Toggle NERDTree
map <C-n> :NERDTreeToggle<CR>

" Quickly edit this file
nmap <leader>ev :e $MYVIMRC<CR>

" Source the .vimrc file
nmap <leader>es :source $MYVIMRC<CR>

" Clear current search term + highlighting
nnoremap <silent> <leader>l :nohl<CR>

" Toggle relativenumber (See function below)
nmap <leader>rn :call NumberToggle()<CR>

" Open NerdTree automatically if no files are specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Number of spaces that a pre-existing tab is equal to.
" For the amount of space used for a enw tab use shiftwidth
au BufRead,BufNewFile *py,*pyw,*.c,*.h set tabstop=4

" What to use for an indent.
" This will affect Ctrl-T and 'autoindent'.
" Python: 4 spaces
" C: tabs (pre-existing files) or 4 spaces (new files)
" Ruby: 2 spaces
au BufRead,BufNewFile *.py,*pyw set shiftwidth=4
au BufRead,BufNewFile *.py,*pyw set expandtab
autocmd FileType ruby setlocal tabstop=2 softtabstop=2 shiftwidth=2
fu Select_c_style()
    if search('^\t', 'n', 150)
        set shiftwidth=4
        set noexpandtab
    el
        set shiftwidth=4
        set expandtab
    en
endf
au BufRead,BufNewFile *.c,*.h call Select_c_style()
au BufRead,BufNewFile Makefile* set noexpandtab

highlight Badwhitespace ctermbg=red guibg=red

" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match Badwhitespace /^\t\+/

" Wrap text after a certain number of characters
" Python: 79
" C: 79
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h set textwidth=79


" Delete the following if above is sufficient
"autocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4 tabstop=8

" Functions
"
function! NumberToggle()
    if(&relativenumber == 1)
    	set number
    else
    	set relativenumber
    endif
endf
