
" Vundle {{{

filetype off " Required by Vundle

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-sensible'
Plugin 'scrooloose/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'bling/vim-airline'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'ervandew/supertab'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'scrooloose/NERDCommenter'
Plugin 'chrisbra/NrrwRgn'
Plugin 'godlygeek/csapprox'
"Plugin 'scrooloose/syntastic'
Plugin 'janko-m/vim-test'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-dispatch'
Plugin 'majutsushi/tagbar'
Plugin 'klen/python-mode'

call vundle#end()

" }}}

" Theme/UI {{{

colorscheme hybrid
set t_Co=256            " No. of colors
syntax enable           " Enables syntax processing
syntax on

let g:enable_bold_font = 1
let g:airline_theme='hybridline'
let g:airline_powerline_fonts=1
set guifont=Hack                        " List of fonts which will be used for the GUI version of Vim.
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

" }}}

" UI Config {{{
set nocompatible
filetype indent plugin on " Loads lang specific indent settings
set wildmenu            " Visual autocomplete for command menu
set nonumber
set relativenumber      " Offset current line number from zero
set number              " Show current line number
set cursorline          " Highlight the screen line
set colorcolumn=80      " Highlight at N columns
set autoindent          " Copy indent from current line when starting new line
set smartindent         " Autoindents next line based on current syntax
set copyindent          " Copy the structure of the existing lines indent when autoindenting a new line.
set lazyredraw          " Redraw screen only when necessary
set showmatch           " Show matching [({})]
set title               " Change terminal windows title
set nowrap              " Do not wrap lines that are longer than the buffer width
set textwidth=0         " Set to zero by default to disable line wrapping.
set completeopt-=preview " Removes preview window for Insert mode completion

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red
" }}}

" Searching {{{
set hlsearch " Highlight search terms
set incsearch " Show search terms as you type
set ignorecase " Ignore case when searching
set smartcase " Ignore case if search is lower, case-sensitive otherwise
" }}}

" Folding {{{
set foldenable          " Enable folding
set foldlevelstart=10   " Open most folds by default
set foldnestmax=10      " 10 nested folds maximum
"set foldmethod=indent   " Fold based on indent level
" }}}

" Window Management {{{
map <C-h> <C-W>h
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-l> <C-W>l

" }}}

" Buffer Management {{{
nnoremap <silent>[b :bprevious<CR>
nnoremap <silent>]b :bnext<CR>
nnoremap <silent>[B :bfirst<CR>
nnoremap <silent>]B :blast<CR>
"}}}

" Leader Shortcuts {{{

" Delete without copying to register
map <leader>d "_dd

" Quickly edit this file
nnoremap <leader>ev :e $MYVIMRC<CR>

" Source the .vimrc file
nnoremap <leader>es :source $MYVIMRC<CR>

" Edit .dotfiles in Vim
nnoremap <leader>ed :e ~/.dotfiles<CR>

" Clear current search term + highlighting
nnoremap <silent> <leader>l :nohl<CR>

" Changes tab `3gt` goes to third tab
map <leader>t gt

" Set buffer to full width
map <leader>\| <C-W>\|

" Set buffers to equal width
map <leader>= <C-W>=

" Better indenting of code blocks
vnoremap < <gv
vnoremap > >gv
"}}}

" Backup and File Settings {{{
set nobackup            " Disable backup files
set noswapfile          " Disable swap file creation
set autoread " Autoreload file when modified outside of vim, but not IN Vim
set fileformats+=mac
"}}}

" NERDTree Settings {{{

" Toggle NERDTree buffer
map <silent><C-n> :NERDTreeToggle<CR>

let g:NERDTreeIgnore=['.pyc$[[file]]','__init__.py','.egg$','.egg-info$']
let g:nerdtree_tabs_no_startup_for_diff=0
let g:nerdtree_tabs_autoclose=1
let g:nerdtree_tabs_startup_cd=1
" }}}

" CtrlP Settings {{{
let g:ctrlp_match_window='bottom,order:ttb'
let g:ctrlp_switch_buffer=0             " Open in new buffer
let g:ctrlp_working_path_mode=0         " Allows changing working directory in CtrlP
" }}}

" Syntastic Settings {{{
let g:syntastic_cucumber_cucumber_args="--profile default"
"}}}

" Pymode Settings {{{
let g:pymode_folding = 0
let g:pymode_lint_on_write = 1
let g:pymode_lint_unmodified = 1
let g:pymode_lint_ignore = "W191,E501"
let g:pymode_lint_message = 1
"}}}

" SuperTab Settings {{{
let g:SuperTabNoCompleteAfter=['^',',','\s']
"}}}

" TagBar Settings {{{
nmap <leader>ot :TagbarToggle<CR>
"}}}

" Autogroups {{{

augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn               " On Vim load
    autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab shiftround
    autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab smarttab shiftround
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix  " Use UNIX (\n) line endings
augroup END

"}}}

if &shell =~# 'fish$'
    set shell=/bin/bash
endif

" vim:foldmethod=marker:foldlevel=0
