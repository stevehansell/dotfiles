" vim: nowrap fdm=marker

" Plugins {{{
packadd minpac
call minpac#init()

call minpac#add('tpope/vim-unimpaired')
call minpac#add('junegunn/fzf.vim')
call minpac#add('dracula/vim')
call minpac#add('mhartington/oceanic-next')

call minpac#add('itchyny/lightline.vim')
call minpac#add('airblade/vim-gitgutter')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-projectionist')
call minpac#add('tpope/vim-dispatch')

" call minpac#add('elmcast/elm-vim')


call minpac#add('christoomey/vim-tmux-runner')
call minpac#add('christoomey/vim-tmux-navigator')
call minpac#add('tpope/vim-surround')
call minpac#add('w0rp/ale')

call minpac#add('othree/yajs.vim')
call minpac#add('othree/html5.vim')
call minpac#add('briancollins/vim-jst')
call minpac#add('leafgarland/typescript-vim')
call minpac#add('mhartington/nvim-typescript')
call minpac#add('Shougo/vimproc.vim')
call minpac#add('Quramy/tsuquyomi')

call minpac#add('tpope/vim-commentary')

call minpac#add('ternjs/tern_for_vim')
call minpac#add('carlitux/deoplete-ternjs')
call minpac#add('Galooshi/vim-import-js')
call minpac#add('Shougo/neocomplcache')
call minpac#add('Shougo/deoplete.nvim')

call minpac#add('Shougo/neosnippet.vim')
call minpac#add('Shougo/neosnippet-snippets')

command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()
" }}}

" UI {{{
syntax enable
filetype indent plugin on " Loads lang specific indent settings
set autoindent          " Copy indent from current line when starting new line
set smartindent         " Autoindents next line based on current syntax
set copyindent          " Copy the structure of the existing lines indent when autoindenting a new line.
set number
set cursorline
set inccommand=nosplit
set termguicolors
colorscheme OceanicNext
let g:lightline = {
  \ 'colorscheme': 'oceanicnext',
  \ }

set rnu
set diffopt=filler,vertical,context:4
set ruler


let g:netrw_banner = 0
let g:netrw_liststyle = 1
let g:netrw_list_hide= netrw_gitignore#Hide()
" let g:netrw_list_hide = '\.pyc,__init__\.py,\.egg$,.*\.egg-info/$,\.ropeproject/$,\.DS_Store$,node_modules/$,\.git/$,\.json\.gzip$,\.vscode/$'
" }}}

" Syntax + Autocompletion {{{
let g:deoplete#enable_at_startup = 1
let g:deoplete#file#enable_buffer_path = 1
set completeopt+=noselect,noinsert

let g:elm_setup_keybindings = 1
let g:neosnippet#snippets_directory='~/Development/snip-snips/snippets'

imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

let g:tern#command = ['tern']
let g:tern#arguments = ['--persistent']

if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" }}}

" NeoVim config {{{
let g:UltiSnipsUsePythonVersion = 3
let g:python_host_prog  = '/usr/local/bin/python2'
let g:python3_host_prog = '/usr/local/bin/python3'
" }}}

" Mappings {{{
nnoremap <SPACE> <Nop>
let mapleader=' '

" Don't copy overwritten text on visual paste
xnoremap p "_dP

nnoremap <C-n> :Ex<CR>
nnoremap <leader>Ce :vsplit $VIMCONFIG/init.vim<CR>
nnoremap <leader>Cs :source $VIMCONFIG/init.vim<CR>
nnoremap <C-p> :<C-u>FZF<CR>
nnoremap <silent> <leader>l :nohl<CR>

vnoremap < <gv
vnoremap > >gv
nnoremap < v$<<esc>
nnoremap > v$><esc>

" Search visual selection
vnoremap // y/<C-R>"<CR>

nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)

function! AgUnderCursor()
  let l:word = expand("<cword>")
  execute ":Ag " . l:word
endfunction

nnoremap <leader>; :call AgUnderCursor()<CR>
vnoremap <leader>; :call AgUnderCursor()<CR>

" nnoremap <leader>a :A<CR>
" }}}

" Window Management {{{
autocmd VimResized * :wincmd = " Automatically rebalance windows on resize
set splitright
set splitbelow
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l
" }}}

" Terminal Mappings {{{
if has('nvim')
  tnoremap <Esc> <C-\><C-n> tnoremap <C-v><Esc> <Esc>
endif
" }}}

" Tmux Runner Settings {{{
let g:VtrStripLeadingWhitespace=0
let g:VtrClearEmptyLines=0
let g:VtrAppendNewline=1

let g:VtrUseVtrMaps=0

nnoremap <leader>rn :VtrOpenRunner<CR>
nnoremap <leader>rk :VtrKillRunner<CR>
nnoremap <leader>ra :VtrAttachToPane<CR>
nnoremap <leader>rf :VtrFocusRunner<CR>
nnoremap <leader>rc :VtrFlushCommand<CR>
nnoremap <leader>rs :VtrSendCommandToRunner<CR>

"}}}

" ALE {{{
let g:ale_linters = {
\ 'css': ['prettier'],
\ 'typescript': ['tslint'],
\ 'javascript': ['prettier', 'tslint', 'eslint'],
\ 'json': ['prettier', 'jsonlint'],
\ 'html': ['tidy'],
\ 'scss': ['prettier']
\}

let g:ale_fixers = {
  \'javascript': ['prettier', 'prettier-eslint'], 'json': ['fixjson', 'prettier']
\}
let g:ale_javascript_prettier_use_local_config = 1
let g:ale_fix_on_save = 1
let g:ale_lint_on_save = 1
let g:ale_set_highlights = 1
" }}}


" Typescript {{{
autocmd FileType typescript setlocal completeopt-=preview
" }}}

" Autogroups {{{
augroup configgroup
autocmd!
autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab shiftround
autocmd FileType javascript,typescript,java,json,elm setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab shiftround conceallevel=0
autocmd FileType yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab shiftround
autocmd FileType html,ejs,jst setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab shiftround
autocmd FileType css,scss setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab shiftround
autocmd FileType vim setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab shiftround
autocmd BufEnter *.sh,*.zsh setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd BufRead,BufNewFile *.md setlocal textwidth=80 smarttab shiftround nospell
au BufNewFile,BufRead *.ejs set filetype=html
autocmd BufRead,BufNewFile *.js set suffixesadd+=.js
augroup END
" }}}
"
" Functions {{{

" CTRL-A CTRL-Q to select all and build quickfix list
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
      \ 'ctrl-q': function('s:build_quickfix_list'),
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-x': 'split',
      \ 'ctrl-v': 'vsplit' }

let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'
" }}}
